return(cbind(BstarSB,BstarCB))
}
## Here is a simple example with an n x 2 matrix containing n=10^5
## observations, where column 2 of x is more persistent than column
## 1. This requires that you first install the forecast library (i.e.,
## install.packages("forecast")).
##
library(forecast)
set.seed(123)
x <- cbind(arima.sim(n = 100000, list(ar = c(.5,.0), ma = c(0,0)),sd = 1),
arima.sim(n = 100000, list(ar = c(.5,.4), ma = c(0,0)),sd = 1))
b.star(x)
write.csv(x, '/Users/travis.howe/Downloads/patton_x.csv')
##  b.star(x,round=TRUE)
##>   b.star(x)
##       BstarSB   BstarCB
##[1,]  50.39272  57.68526
##[2,] 251.62894 288.04323
##>   b.star(x,round=TRUE)
##     BstarSB BstarCB
##[1,]      50      58
##[2,]     252     289
lam <- function(s){
return((abs(s)>=0)*(abs(s)<0.5)+2*(1-abs(s))*(abs(s)>=0.5)*(abs(s)<=1))
}
b.star <- function(data,
Kn = NULL,
mmax= NULL,
Bmax = NULL,
c = NULL,
round = FALSE){
data <- data.frame(data)
n <- nrow(data)
k <- ncol(data)
if (is.null(Kn)) Kn <- max(5,ceiling(log10(n)))
if (is.null(mmax)) mmax <- ceiling(sqrt(n))+Kn
if (is.null(Bmax)) Bmax <- ceiling(min(3*sqrt(n),n/3))
if (is.null(c)) c <- qnorm(0.975)
BstarSB <- numeric(length=k)
BstarCB <- numeric(length=k)
for(i in 1:k) {
rho.k <- acf(data[,i],
lag.max = mmax,
type = "correlation",
plot = FALSE)$acf[-1]
rho.k.crit <- c*sqrt(log10(n)/n)
num.insignificant <- sapply(1:(mmax-Kn+1),
function(j){
sum((abs(rho.k) < rho.k.crit)[j:(j+Kn-1)])
})
if(any(num.insignificant==Kn)) {
mhat <- which(num.insignificant==Kn)[1]
} else {
## If no runs of length Kn are insignificant, take the smallest
## value of rho(k) that is significant.
if(any(abs(rho.k) > rho.k.crit)) {
lag.sig <- which(abs(rho.k) > rho.k.crit)
k.sig <- length(lag.sig)
if(k.sig == 1) {
## When only one lag is significant, mhat is the sole
## significant rho(k).
mhat <- lag.sig
} else {
## If there are more than one significant lags but no runs
## of length Kn, take the largest value of rho(k) that is
## significant.
mhat <- max(lag.sig)
}
} else {
## When there are no significant lags, mhat must be the
## smallest positive integer (footnote c), hence mhat is set
## to one.
mhat <- 1
}
}
M <- ifelse(2*mhat > mmax, mmax, 2*mhat)
kk <- seq(-M,M)
R.k <- ccf(data[,i], data[,i],
lag.max = M,
type = "covariance",
plot = FALSE)$acf
Ghat <- sum(lam(kk/M)*abs(kk)*R.k)
DCBhat <- 4/3*sum(lam(kk/M)*R.k)^2
DSBhat <- 2*sum(lam(kk/M)*R.k)^2
BstarSB[i] <- ((2*Ghat^2)/DSBhat)^(1/3)*n^(1/3)
BstarCB[i] <- ((2*(Ghat^2)/DCBhat)^(1/3))*(n^(1/3))
print(Bmax)
print(BstarSB)
print(BstarCB)
}
## The user can choose whether they want rounded values returned or
## not. BstarCB is rounded up, BstarSB simply rounded but both must
## be positive integers.
if(round == FALSE) {
BstarSB <- ifelse(BstarSB > Bmax, Bmax, BstarSB)
BstarCB <- ifelse(BstarCB > Bmax, Bmax, BstarCB)
} else {
BstarSB <- ifelse(BstarSB > Bmax, Bmax, ifelse(BstarSB < 1, 1, round(BstarSB)))
BstarCB <- ifelse(BstarCB > Bmax, Bmax, ifelse(BstarCB < 1, 1, ceiling(BstarCB)))
}
return(cbind(BstarSB,BstarCB))
}
## Here is a simple example with an n x 2 matrix containing n=10^5
## observations, where column 2 of x is more persistent than column
## 1. This requires that you first install the forecast library (i.e.,
## install.packages("forecast")).
##
library(forecast)
set.seed(123)
x <- cbind(arima.sim(n = 100000, list(ar = c(.5,.0), ma = c(0,0)),sd = 1),
arima.sim(n = 100000, list(ar = c(.5,.4), ma = c(0,0)),sd = 1))
b.star(x)
write.csv(x, '/Users/travis.howe/Downloads/patton_x.csv')
##  b.star(x,round=TRUE)
##>   b.star(x)
##       BstarSB   BstarCB
##[1,]  50.39272  57.68526
##[2,] 251.62894 288.04323
##>   b.star(x,round=TRUE)
##     BstarSB BstarCB
##[1,]      50      58
##[2,]     252     289
# CHAPTER 5
# ****Look and see what topics are contained in his book
# ***when is it best to use ARIMA, ARIMA with fourier, or TBATS?
# **************Forecasting sales allowing for advertising expenditure
# Time plot of both variables
autoplot(advert, facets=TRUE)
# Fit ARIMA model
fit <- auto.arima(advert[, 'sales'], xreg = advert[, 'advert'], stationary = TRUE)
# Check model. Increase in sales for each unit increase in advertising
salesincrease <- coefficients(fit)[3]
# Forecast fit as fc
fc <- forecast(fit, xreg = rep(10, 6))
# Plot fc with x and y labels
autoplot(fc) + xlab("Month") + ylab("Sales")
# *******************Forecasting electricity demand
# Time plots of demand and temperatures
autoplot(elec[, c('Demand', 'Temperature')], facets = TRUE)
# Matrix of regressors
xreg <- cbind(MaxTemp = elec[, "Temperature"],
MaxTempSq = elec[, "Temperature"]^2,
Workday = elec[, "Workday"])
# Fit model
fit <- auto.arima(elec[, 'Demand'], xreg = xreg)
# Forecast fit one day ahead
forecast(fit, xreg = cbind(20, 400, 1))
# *************Forecasting weekly data
# Set up harmonic regressors of order 13
harmonics <- fourier(gasoline, K = 13)
# Fit regression model with ARIMA errors
fit <- auto.arima(gasoline, xreg = harmonics, seasonal = FALSE)
# Forecasts next 3 years
newharmonics <- fourier(gasoline, K = 13, h = 156)
fc <- forecast(fit, xreg = newharmonics)
# Plot forecasts fc
autoplot(fc)
# **********Harmonic regression for multiple seasonality
# Fit a harmonic regression using order 10 for each type of seasonality
fit <- tslm(taylor ~ fourier(taylor, K = c(10, 10)))
# Forecast 20 working days ahead
fc <- forecast(fit, newdata = data.frame(fourier(taylor, K = c(10, 10), h = 20*48)))
# Plot the forecasts
autoplot(fc)
# Check the residuals of fit
checkresiduals(fit)
# ************Forecasting call bookings
# Plot the calls data
autoplot(calls)
# Set up the xreg matrix
xreg <- fourier(calls, K = c(10, 0))
# Fit a dynamic regression model
fit <- auto.arima(calls, xreg = xreg, seasonal = FALSE, stationary = TRUE)
# Check the residuals
checkresiduals(fit)
# Plot forecasts for 10 working days ahead
fc <- forecast(fit, xreg =  fourier(calls, c(10, 0), h = 1690))
autoplot(fc)
# ***********TBATS models for electricity demand
# Plot the gas data
autoplot(gas)
# Fit a TBATS model to the gas data
fit <- tbats(gas)
# Forecast the series for the next 5 years
fc <- forecast(fit, h = 60)
# Plot the forecasts
autoplot(fc)
# Record the Box-Cox parameter and the order of the Fourier terms
lambda <- 0.082
K <- 5
lam <- function(s){
return((abs(s)>=0)*(abs(s)<0.5)+2*(1-abs(s))*(abs(s)>=0.5)*(abs(s)<=1))
}
b.star <- function(data,
Kn = NULL,
mmax= NULL,
Bmax = NULL,
c = NULL,
round = FALSE){
data <- data.frame(data)
n <- nrow(data)
k <- ncol(data)
if (is.null(Kn)) Kn <- max(5,ceiling(log10(n)))
if (is.null(mmax)) mmax <- ceiling(sqrt(n))+Kn
if (is.null(Bmax)) Bmax <- ceiling(min(3*sqrt(n),n/3))
if (is.null(c)) c <- qnorm(0.975)
BstarSB <- numeric(length=k)
BstarCB <- numeric(length=k)
for(i in 1:k) {
rho.k <- acf(data[,i],
lag.max = mmax,
type = "correlation",
plot = FALSE)$acf[-1]
rho.k.crit <- c*sqrt(log10(n)/n)
num.insignificant <- sapply(1:(mmax-Kn+1),
function(j){
sum((abs(rho.k) < rho.k.crit)[j:(j+Kn-1)])
})
if(any(num.insignificant==Kn)) {
mhat <- which(num.insignificant==Kn)[1]
} else {
## If no runs of length Kn are insignificant, take the smallest
## value of rho(k) that is significant.
if(any(abs(rho.k) > rho.k.crit)) {
lag.sig <- which(abs(rho.k) > rho.k.crit)
k.sig <- length(lag.sig)
if(k.sig == 1) {
## When only one lag is significant, mhat is the sole
## significant rho(k).
mhat <- lag.sig
} else {
## If there are more than one significant lags but no runs
## of length Kn, take the largest value of rho(k) that is
## significant.
mhat <- max(lag.sig)
}
} else {
## When there are no significant lags, mhat must be the
## smallest positive integer (footnote c), hence mhat is set
## to one.
mhat <- 1
}
}
M <- ifelse(2*mhat > mmax, mmax, 2*mhat)
kk <- seq(-M,M)
R.k <- ccf(data[,i], data[,i],
lag.max = M,
type = "covariance",
plot = FALSE)$acf
Ghat <- sum(lam(kk/M)*abs(kk)*R.k)
DCBhat <- 4/3*sum(lam(kk/M)*R.k)^2
DSBhat <- 2*sum(lam(kk/M)*R.k)^2
BstarSB[i] <- ((2*Ghat^2)/DSBhat)^(1/3)*n^(1/3)
BstarCB[i] <- ((2*(Ghat^2)/DCBhat)^(1/3))*(n^(1/3))
print(Bmax)
print(BstarSB)
print(BstarCB)
}
## The user can choose whether they want rounded values returned or
## not. BstarCB is rounded up, BstarSB simply rounded but both must
## be positive integers.
if(round == FALSE) {
BstarSB <- ifelse(BstarSB > Bmax, Bmax, BstarSB)
BstarCB <- ifelse(BstarCB > Bmax, Bmax, BstarCB)
} else {
BstarSB <- ifelse(BstarSB > Bmax, Bmax, ifelse(BstarSB < 1, 1, round(BstarSB)))
BstarCB <- ifelse(BstarCB > Bmax, Bmax, ifelse(BstarCB < 1, 1, ceiling(BstarCB)))
}
return(cbind(BstarSB,BstarCB))
}
## Here is a simple example with an n x 2 matrix containing n=10^5
## observations, where column 2 of x is more persistent than column
## 1. This requires that you first install the forecast library (i.e.,
## install.packages("forecast")).
##
library(forecast)
set.seed(123)
x <- cbind(arima.sim(n = 100000, list(ar = c(.5,.0), ma = c(0,0)),sd = 1),
arima.sim(n = 100000, list(ar = c(.5,.4), ma = c(0,0)),sd = 1))
b.star(x)
write.csv(x, '/Users/travis.howe/Downloads/patton_x.csv')
##  b.star(x,round=TRUE)
##>   b.star(x)
##       BstarSB   BstarCB
##[1,]  50.39272  57.68526
##[2,] 251.62894 288.04323
##>   b.star(x,round=TRUE)
##     BstarSB BstarCB
##[1,]      50      58
##[2,]     252     289
install.packages('betareg')
set.seed(10)
ggplot(data=GTest,aes(x=model,y=yield)) +
geom_point() + geom_abline(slope=1)
install.packages('betareg')
library(betareg)
data("GasolineYield", package = "betareg")
set.seed(52352)
GasolineYield$rgroup <- sample(1:100,
size=dim(GasolineYield)[[1]],replace=T)
GTrain <- subset(GasolineYield,
GasolineYield$rgroup<=50)
GTest <- subset(GasolineYield,
GasolineYield$rgroup>50)
gy <- betareg(yield ~ gravity + pressure + temp | gravity + pressure + temp,
data = GTrain)
print(summary(gy))
GTest$model <- predict(gy,newdata=GTest)
library(ggplot2)
ggplot(data=GTest,aes(x=model,y=yield)) +
geom_point() + geom_abline(slope=1)
library(betareg)
data("GasolineYield", package = "betareg")
set.seed(52352)
GasolineYield$rgroup <- sample(1:100,
size=dim(GasolineYield)[[1]],replace=T)
GTrain <- subset(GasolineYield,
GasolineYield$rgroup<=50)
GTest <- subset(GasolineYield,
GasolineYield$rgroup>50)
gy <- betareg(yield ~ gravity + pressure + temp | gravity + pressure + temp,
data = GTrain)
print(summary(gy))
GTest$model <- predict(gy,newdata=GTest)
library(ggplot2)
ggplot(data=GTest,aes(x=model,y=yield)) +
geom_point() + geom_abline(slope=1)
library(wru)
install.packages(wru)
install.packages("wru")
data(voters)
predict_race(voter.file = 'Howe', surname.only = T)
predict_race(voter.file=voters, surname.only=T)
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
predict_race(voter.file=voters, surname.only=T)
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters, census.geo = "tract", census.key = "...", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters, census.geo = "tract", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
# voters_new <- rbind(voters, data.fram(VoterID=11, surname="Howe", state="MZ", CD=)))
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.fram(VoterID=11, surname="Howe", state="MZ", CD=037))
voters_new
# predict_race(voter.file=voters, surname.only=T)
# predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=037))
voters_new
# predict_race(voter.file=voters, surname.only=T)
# predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters
# voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=037))
# voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=4, count=037, track=000000, block=0000, precinct=0, age=35, sex=1, party="Ind", PID=0, place=))
voters_new
# predict_race(voter.file=voters, surname.only=T)
# predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters
# voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=037))
voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=4, count=037, track=000000, block=0000, precinct=0, age=35, sex=1, party="Ind", PID=0, place=00000))
voters_new
# predict_race(voter.file=voters, surname.only=T)
# predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters
# voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=037))
voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=4, county=037, track=000000, block=0000, precinct=0, age=35, sex=1, party="Ind", PID=0, place=00000))
voters_new
# predict_race(voter.file=voters, surname.only=T)
# predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters
# voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=037))
voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=4, county=037, tract=000000, block=0000, precinct=0, age=35, sex=1, party="Ind", PID=0, place=00000))
voters_new
# predict_race(voter.file=voters, surname.only=T)
# predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters
# voters_new <- rbind(voters, data.frame(VoterID=11, surname="Howe", state="MZ", CD=037))
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MZ", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
voters_new
# predict_race(voter.file=voters, surname.only=T)
# predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MZ", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MZ", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters_new, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MO", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters_new, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MO", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
voters_new <- rbind(voters_new, data.frame(VoterID="12", surname="Holmes", state="MO", CD="5", county="095", tract="000000", block="0000", precinct="0", age="24", sex="1", party="Ind", PID="0", place='00000'))
voters_new
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters_new, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MO", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
voters_new <- rbind(voters_new, data.frame(VoterID="12", surname="Holmes", state="MO", CD="5", county="095", tract="000000", block="0000", precinct="0", age="24", sex="1", party="Ind", PID="0", place='00000'))
voters_new <- rbind(voters_new, data.frame(VoterID="12", surname="Holmes", state="MO", CD="5", county="095", tract="000000", block="0000", precinct="0", age="24", sex="0", party="Ind", PID="0", place='00000'))
voters_new
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters_new, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MO", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
voters_new <- rbind(voters_new, data.frame(VoterID="12", surname="Holmes", state="MO", CD="5", county="095", tract="000000", block="0000", precinct="0", age="24", sex="1", party="Ind", PID="0", place='00000'))
voters_new <- rbind(voters_new, data.frame(VoterID="12", surname="Holmes", state="MO", CD="5", county="095", tract="000000", block="0000", precinct="0", age="24", sex="0", party="Ind", PID="0", place='00000'))
voters_new
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters_new, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID", age=True, sex=True)
library(wru)
load('/Users/travis.howe/Downloads/voters.RData')
voters_new <- rbind(voters, data.frame(VoterID="11", surname="Howe", state="MO", CD="4", county="037", tract="000000", block="0000", precinct="0", age="35", sex="1", party="Ind", PID="0", place='00000'))
voters_new <- rbind(voters_new, data.frame(VoterID="12", surname="Holmes", state="MO", CD="5", county="095", tract="000000", block="0000", precinct="0", age="24", sex="1", party="Ind", PID="0", place='00000'))
voters_new <- rbind(voters_new, data.frame(VoterID="12", surname="Howe", state="MO", CD="5", county="095", tract="000000", block="0000", precinct="0", age="24", sex="0", party="Ind", PID="0", place='00000'))
voters_new
# predict_race(voter.file=voters, surname.only=T)
predict_race(voter.file = voters_new, census.geo = "county", census.key = "5749053aae31684fca0ad8057364a4239c4618e4", party = "PID")
R.home()
data(engel)
df <- read.csv(file='/Users')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd('Users/travis.howe/Projects/github/data_science/causal_inference/I_and_R_treatment\ effect\ evaluation/matching_estimators/')
setwd('Users/travis.howe/Projects/github/data_science/causal_inference')
setwd('Users/travis.howe/Projects/github/data_science/causal_inference/')
setwd('Users/travis.howe/Projects/github/data_science/')
setwd('Users/travis.howe/Projects/github/data_science')
getwd
getwd()
setwd("Users/travis.howe/Projects/github/data_science")
setwd("/Users/travis.howe/Projects/github/data_science")
setwd('/Users/travis.howe/Projects/github/data_science/causal_inference/I_and_R_treatment\ effect\ evaluation/matching_estimators/')
setwd('/Users/travis.howe/Projects/github/data_science/causal_inference/I_and_R_treatment effect evaluation/matching_estimators/')
print summary(df)
print(summary(df))
print(df)
print(df)
df <- read.csv(file='estimation_approaches.csv')
print(df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print(df)
source('~/.active-rstudio-document', echo=TRUE)
data(lalonde)
source('~/.active-rstudio-document', echo=TRUE)
library(Matching)
install.packages("Matching", dependencies = TRUE)
library(Matching)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
df
order('propensity_score')
df[order('propensity_score')]
df[order('propensity_score'),]
df[ do.call(order, propensity_score), ]
df[ do.call(order, 'propensity_score'), ]
df[ with(dd, order('propensity_score')), ]
df[ with(df, order('propensity_score')), ]
df[order(df$propensity_score),]
df[order(-df$propensity_score),]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data(lalonde)
df2 <- data(lalonde)
summary(df2)
df2
df2 <- Matching.data(lalonde)
Matching.lalonde
rr <- Match(Y=df$y, Tr=df$treatment, X=df[covars], M=1, replace=FALSE, Weight=2);
source('~/Projects/github/data_science/causal_inference/I_and_R_treatment effect evaluation/matching_estimators/estimation_approaches.R', echo=TRUE)
